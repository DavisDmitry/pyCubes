name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: true

jobs:
  change-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Change version
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: python scripts/edit_version.py
      - name: Configure git
        run: |
          git config user.email dmitrydavis@protonmail.com
          git config user.name DavisDmitry
      - name: Commit and push
        run: |
          git add pyproject.toml
          git commit -m "üîñ Release version $VERSION"
          git push

  generate-api-reference:
    needs: change-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Pull latest changes
        run: git pull
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install poetry
      - name: Install dependencies
        run: poetry install --no-dev --no-root -E docs
      - name: Generate API Reference
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: poetry run python scripts/generate_reference.py
      - name: Configure git
        run: |
          git config user.email dmitrydavis@protonmail.com
          git config user.name DavisDmitry
      - name: Commit and push
        run: |
          git add docs
          git commit -m "üìù Generate current API Reference"
          git push

  create-release:
    needs: generate-api-reference
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Pull latest changes
        run: git pull
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.event.inputs.version }}
        run: gh release create $VERSION -d
